from scipy.stats import norm
from math import sqrt
import pandas as pd
import math

# print(round(norm.cdf(1),2))
# print(round(norm.cdf(1.12),2))
# print(round(norm.cdf(-1.87),2))
# print(round(1 - norm.cdf(2),2))

# print(round(norm.ppf(0.1),2))
# print(round(norm.ppf(1-0.05),2))
# print(round(norm.ppf(0.025),2))
# print(round(norm.ppf(1-0.01),2))
# print(round(norm.ppf(0.005),2))

# Известно, что вес жителя Гонконга распределен нормально со средним в  кг и стандартным отклонением  кг. 
# Лифт в одном бизнес-центре может поднять не более  кг. Также на нем указана вместимость не более  человек. 
# Другими словами, если  человек входят в лифт, их средний вес не должен превысить  кг (как ).
# Какова вероятность, что средний вес случайно подошедших к лифту  человек превысит  кг и не позволит лифту подняться? 
# Укажите ответ в виде десяточной дроби с 3 знаками после точки-разделителя.
# print(round(1-norm.cdf(75, 70, sqrt(5), 3))

# Известно, что  20% взрослого населения в городе Пало Альто, Калифорния, обладают машиной Tesla 
# (другими словами, p, истинная пропорция обладателей Tesla в городе равна 0.2). 
# Допустим, вы берете выборку из 225 взрослых людей из Пало Альто. 
# Какова вероятность, что выборочная пропорция не превысит 16 % (то есть вероятность что p <= 0.16 )?

# Укажите ответ в виде десяточной дроби с 3 знаками после точки-разделителя.

# p = 0.2
# n = 225.0
# E = sqrt(p*(1-p)/n) # стандратное отклонение вероятности для выборки в 255
# print(E)
# print(round(norm.cdf(0.16, 0.2, E), 3))

# Случайный покупатель в книжном магазине купит одну, две или три книги с вероятностью 0.3, 0.4 и 0.3, соответственно. 
# Каждая книга стоит 400  рублей. Найдите математическое ожидание расходов покупателя магазина.
# df = pd.DataFrame({
#     'X': [1, 2, 3],
#     'P': [0.3, 0.4, 0.3]
# })
# # математическое ожидание
# E = (df.X * df.P).sum()
# print(E*400)
# Случайная величина  имеет следующее распределение вероятностей:
# df = pd.DataFrame({
#     'X': [2, 3, 4, 5],
#     'P': [0.1, 0.2, 0.6, 0.1]
# })
# # математическое ожидание
# E = (df.X * df.P).sum()
# print(E)
# # математическое ожидание (C+1)
# E = (df.X * (df.P+1)).sum()
# print(E)

# Оценки студентов на международной онлайн олимпиаде распределены нормально со средним 700 баллов 
# и стандартным отклонением 120 баллов. 
# Диплом первой категории выдается участникам, набравшим более 820 баллов. 
# Диплом второй категории — участникам, набравшим от 730 до 820 баллов. 
# Для решения задачи используйте функции norm.cdf() и norm.ppf() из пакета scipy.stats.

# 1. Какая доля участников получает диплом 1 категории? 
# # Ответ укажите с округлением до 2 знаков после точки-разделителя.
# a = round(1-norm.cdf(820, 700, 120), 2)
# print(a)
# # 2. Какая доля участников получает диплом 2 категории? Ответ укажите с округлением до 2 знаков после точки-разделителя.
# b = round(1-norm.cdf(730, 700, 120) - a, 2)
# print(b)
# # Некоторые участники порой выставляли ответы, даже не пытаясь решить задачу, случайным образом, стремясь набрать минимальное количество баллов лишь для того, чтобы получить сертификат об участии. Оргкомитет олимпиады принял решение не выдавать сертификатов тем, кто попал в 5 % участников с наименьшими баллами. Какое минимальное количество баллов нужно было набрать, чтобы получить сертификат об участии? Количество баллов – это целое число.
# # просто подбор 503
# print(norm.cdf(503, 700, 120))
# sigma = 12000
# X = 16100
# n = 36
# za = 1.96
# m1 = X - za * sigma / sqrt(n)
# m2 = X + za * sigma / sqrt(n)
# print(m1, m2)

# # Аккумуляторный завод производит батарейки, срок службы которых имеет стандартное отклонение 2.4 месяца. 
# # Средний срок службы батареек в случайной выборке из 64 штук составил 12.35 месяца. 
# # Необходимо построить 90 %-ный доверительный интервал для истинного среднего 
# # срока службы производимой батарейки и ответить на вопросы заданий ниже.
# sigma = 2.4
# n = 64
# X = 12.35
# za = 1.65
# alpha = 1 - 90/100
# az = -norm.ppf(alpha / 2)
# m1 = round(X - za * sigma / sqrt(n), 3)
# m2 = round(X + za * sigma / sqrt(n), 3)
# print(m1, m2)

# Для случая с известным значением σ предел погрешности и его интервалы
from scipy.stats import norm
def confidence_interval_norm(alpha, sigma, n, mean):
    ''' первый аргумент функции alfa — уровень значимости ;
        второй sigma — стандартное отклонение;
        третий n — размер выборки ;
        четвертый mean — среднее значение выборки.'''
    value = -norm.ppf(alpha / 2) * sigma / sqrt(n)
    return mean - value, mean + value

# alpha = 0.10
# print(-norm.ppf(alpha / 2))

# Для случая с неизвестным  предел погрешности
from scipy.stats import t
def confidence_interval_t(alpha, s, n, mean):
    ''' первый аргумент функции alfa — уровень значимости ;
        второй s — выборочное отклонение s или sigma;
        третий n — размер выборки ;
        четвертый mean — среднее значение выборки.'''
    value = -t.ppf(alpha / 2, n - 1) * s / sqrt(n)
    return round(mean - value, 2), round(mean + value, 2)

# Управляющий взял случайную выборку из 15 покупателей и выяснил, 
# что их средние расходы равны 2000  рублей, 
# а выборочное стандартное отклонение равно 400 рублей.
# print(confidence_interval_t(0.1, 400, 15, 2000))
# print(confidence_interval_t(0.05, 400, 15, 2000))
# print(confidence_interval_t(0.01, 400, 15, 2000))

# На случайной выборке из 250 домохозяйств был посчитан средний размер выплаченного налога, 
# и он составил $3540. 
# Также на основании ранее предоставленных данных из налоговой инспекции 
# известно истинное стандартное отклонение величины подоходного налога, равное $1150.
# Необходимо найти 99% доверительный интервал для истинного среднего значения налоговых выплат за год.

# print(confidence_interval_norm(0.01, 1150, 250, 3540))

# Ниже представлена случайная выборка значений величины , распределенной нормально. 
# df = pd.DataFrame({
#     'X': [1.2, 0.2, 1.6, 1.9, -0.4,	0.5, 1.4, 1.7, 2.5,	1.3]
# })

# alfa = 1 - 95/100 
# std = df.X.std()
# n = df.X.count()
# mean = df.X.mean()
# print(alfa, std, n, mean)
# print(confidence_interval_t(alfa, std, n, mean))

# Чтобы оценить удовлетворенность клиентов сети отелей, 
# менеджер взял случайную выборку из 189 комментариев, 
# оставленных посетителями на онлайн-платформе по бронированию, 
# и провел анализ их содержания. Выяснилось,
# что 132 комментария были положительными, остальные — негативными.
# n = 189
# n2 = 132
# _p = round(n2 / n, 3)
# print(_p)
# alpha = 1 - 0.9
# zalpha = -norm.ppf(alpha / 2)
# print(zalpha)
# # формула доверительного интервала
# # n = 550
# # _p = 0.64
# value = zalpha * sqrt(_p * (1 - _p) / n)
# p = _p - value, _p + value 
# print(p)
# # Найдите z-критическое для интервала с уровнем доверия 93 %. 
# alpha = 1 - 0.99
# z = -norm.ppf(alpha / 2)
# print(z)
# # 0.95 - доверительный интервал, 100-1 число степеней свободы
# # для двустороннего t-теста
# value = t.ppf((1 + 0.95)/2, 100-1)
# print(value) # 1.98
# Доверительный интервал для среднего  нормально распределённой величины , на выборке размером 10 , если σ известна, на 99 % уровне доверия
alpha = 0.99
n = 10
k = n - 1
value = -norm.ppf((1-alpha) / 2)
print(round(value, 2))
# 2. Доверительный интервал для среднего m нормально распределённой величины X, на выборке размером 10, если σ неизвестна, на 99% уровне доверия
alpha = 0.99
n = 10
k = n - 1
value = t.ppf((1 + alpha)/2, k)
print(round(value, 2))
# 3. Доверительный интервал для среднего m, на выборке размером 100, σ неизвестна, на 95% уровне доверия
alpha = 0.95
n = 100
k = n - 1
value = t.ppf((1 + alpha)/2, k)
print(round(value, 2))
# 4. Доверительный интервал для пропорции p, на выборке размером 100, на 95% уровне доверия
alpha = 0.95
n = 100
k = n - 1
value = -norm.ppf((1-alpha) / 2)
print(round(value, 2))


# Доверительный интервал для среднего  нормально распределённой величины , на выборке размером 10, если  неизвестна, на 99% уровне доверия
# value = t.ppf((1 + 0.95)/2, 10-1)
# print(value) # 1.98



